[{"/Users/mathilde/Documents/kode/madplan/src/index.js":"1","/Users/mathilde/Documents/kode/madplan/src/reportWebVitals.js":"2","/Users/mathilde/Documents/kode/madplan/src/App.js":"3","/Users/mathilde/Documents/kode/madplan/src/components/makeMealplan.js":"4","/Users/mathilde/Documents/kode/madplan/src/components/navbar.js":"5","/Users/mathilde/Documents/kode/madplan/src/components/allRecipes.js":"6","/Users/mathilde/Documents/kode/madplan/src/components/filter.js":"7"},{"size":561,"mtime":1666526714259,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1666526714259,"results":"10","hashOfConfig":"9"},{"size":548,"mtime":1666533624179,"results":"11","hashOfConfig":"9"},{"size":5269,"mtime":1666599564791,"results":"12","hashOfConfig":"9"},{"size":760,"mtime":1666533885950,"results":"13","hashOfConfig":"9"},{"size":3155,"mtime":1666599573300,"results":"14","hashOfConfig":"9"},{"size":649,"mtime":1666526714258,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"14kxmqm",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"/Users/mathilde/Documents/kode/madplan/src/index.js",[],[],[],"/Users/mathilde/Documents/kode/madplan/src/reportWebVitals.js",[],[],"/Users/mathilde/Documents/kode/madplan/src/App.js",[],[],"/Users/mathilde/Documents/kode/madplan/src/components/makeMealplan.js",["39","40","41"],[],"import recipes from \"../data/recipes.json\";\nimport { Filter } from \"./filter\";\nimport React, { useState } from \"react\";\nimport { Card } from \"react-bootstrap\";\n\nexport function Mealplan() {\n  const [numDishes, setNumDishes] = useState();\n  const [showIngredients, setShowIngredients] = useState(false);\n\n  // if numDishes is not set or equal to 0, ask to set number of dishes\n  if (!numDishes || numDishes === 0) {\n    return (\n      <div className=\"dishContainer\">\n        <Filter onChangeNumDishes={setNumDishes} inputValue={\"\"} />\n      </div>\n    );\n  }\n\n  // if numDishes is larger than the number of recipes, alert error message and reset numDishes\n  if (numDishes > recipes.length) {\n    return (\n      <div className=\"centeredContainer\">\n        <p>Hov. SÃ¥ mange opskrifter kender jeg slet ikke ðŸ˜”</p>\n        <button onClick={() => setNumDishes(0)}>PrÃ¸v igen</button>\n      </div>\n    );\n  }\n\n  // load all recipes from the data file and store them in an array\n  const allRecipes = recipes.map((recipe) => {\n    return recipe;\n  });\n\n  // based on the number of dishes, pick random recipes from the array\n  // no duplicates\n  const randomRecipes = [];\n  for (let i = 0; i < numDishes; i++) {\n    let randomRecipe =\n      allRecipes[Math.floor(Math.random() * allRecipes.length)];\n    if (!randomRecipes.includes(randomRecipe)) {\n      randomRecipes.push(randomRecipe);\n    }\n  }\n\n  // display the week number\n  let currentDate = new Date();\n  let startDate = new Date(currentDate.getFullYear(), 0, 1);\n  var days = Math.floor((currentDate - startDate) / (24 * 60 * 60 * 1000));\n  var weekNumber = Math.ceil(days / 7);\n\n  // export the random recipes as a text file\n  const downloadRecipes = () => {\n    const text = randomRecipes\n      .map((recipe) => {\n        // if there's no link, map only the name of the recipe\n        if (!recipe.link) {\n          return `${recipe.name}`;\n        }\n        // if there's a link, map the name and the link separeted by a dash\n        return `${recipe.name} - ${recipe.link}`;\n      })\n      .join(\"\\n\");\n\n    const blob = new Blob([text], {\n      type: \"text/plain\",\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"madplan.txt\";\n    link.click();\n  };\n\n  // make a comma separated list of the ingredients in the random recipes\n  const ingredients = randomRecipes\n    .map(\n      (recipe) => {\n        return recipe.ingredients;\n      }\n      // join the ingredients into one string\n    )\n    .join(\", \");\n\n  // sort the ingredients alphabetically\n  const sortedIngredients = ingredients.split(\", \").sort().join(\", \");\n\n  // make a list of the sorted ingredients and count how many times each ingredient is used\n  const ingredientList = sortedIngredients.split(\", \");\n  const ingredientCount = {};\n  ingredientList.forEach((ingredient) => {\n    ingredientCount[ingredient] = (ingredientCount[ingredient] || 0) + 1;\n  });\n\n  // sort ingredient count by alphabetical order\n  const sortedIngredientCount = Object.entries(ingredientCount);\n  sortedIngredientCount.sort((a, b) => {\n    if (a[0] < b[0]) {\n      return -1;\n    }\n    if (a[0] > b[0]) {\n      return 1;\n    }\n    return 0;\n  });\n\n  // button that returns the ingredients as a text file\n  const downloadIngredients = () => {\n    const text = sortedIngredientCount\n      .map((ingredient) => {\n        if (ingredient[1] > 1) {\n          return `${ingredient[1]}x ${ingredient[0]}`;\n        } else {\n          return `${ingredient[0]}`;\n        }\n      })\n\n      // join the ingredients into one string\n      .join(\"\\n\");\n\n    const blob = new Blob([text], {\n      type: \"text/plain\",\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"ingredienser.txt\";\n    link.click();\n  };\n\n  // return the array of random recipes\n  return (\n    <div>\n      <Filter\n        onChangeNumDishes={(numDishes) => setNumDishes(numDishes)}\n        resetNumDishes={() => setNumDishes(0)}\n        inputValue={numDishes}\n      />\n      <div className=\"dishList\">\n        {randomRecipes.map((recipe) => {\n          return (\n            <div key={recipe.id}>\n              <Card className=\"dishListCard\">\n                <Card.Body>\n                  <Card.Title className=\"dishListCardTitle\">\n                    {recipe.name}\n                  </Card.Title>\n                  <Card.Text className=\"dishCardText\">\n                    <i>{recipe.ingredients}</i>\n                  </Card.Text>\n                  {recipe.link !== \"\" ? (\n                    <Card.Link\n                      className=\"dishCardLink\"\n                      href={recipe.link}\n                      target=\"_blank\"\n                    >\n                      Se opskrift\n                    </Card.Link>\n                  ) : (\n                    \"\"\n                  )}\n                </Card.Body>\n              </Card>\n            </div>\n          );\n        })}\n      </div>\n\n      <div className=\"centeredContainer\">\n        <div>\n          <button onClick={downloadIngredients}>Hent ingrediensliste</button>\n          <button onClick={downloadRecipes}>Hent madplan</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/Users/mathilde/Documents/kode/madplan/src/components/navbar.js",[],[],"/Users/mathilde/Documents/kode/madplan/src/components/allRecipes.js",[],[],"/Users/mathilde/Documents/kode/madplan/src/components/filter.js",[],[],{"ruleId":"42","severity":1,"message":"43","line":8,"column":10,"nodeType":"44","messageId":"45","endLine":8,"endColumn":25},{"ruleId":"42","severity":1,"message":"46","line":8,"column":27,"nodeType":"44","messageId":"45","endLine":8,"endColumn":45},{"ruleId":"42","severity":1,"message":"47","line":49,"column":7,"nodeType":"44","messageId":"45","endLine":49,"endColumn":17},"no-unused-vars","'showIngredients' is assigned a value but never used.","Identifier","unusedVar","'setShowIngredients' is assigned a value but never used.","'weekNumber' is assigned a value but never used."]