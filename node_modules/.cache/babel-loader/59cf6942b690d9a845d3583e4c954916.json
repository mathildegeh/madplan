{"ast":null,"code":"var _jsxFileName = \"/Users/mathilde.gehring/Documents/GitHub/madplan/src/components/dishes.js\",\n    _s = $RefreshSig$();\n\nimport recipes from \"../data/recipes.json\";\nimport { Filter } from \"./filter\";\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Dishes() {\n  _s();\n\n  const [numDishes, setNumDishes] = useState();\n  const [showIngredients, setShowIngredients] = useState(false); // if numDishes is not set or equal to 0, ask to set number of dishes\n\n  if (!numDishes || numDishes === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dishContainer\",\n      children: /*#__PURE__*/_jsxDEV(Filter, {\n        onChangeNumDishes: setNumDishes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this);\n  } // if numDishes is larger than the number of recipes, show error message and provide a return button\n\n\n  if (numDishes > recipes.length) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dishContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Du har valgt for mange retter.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setNumDishes(0),\n        children: \"V\\xE6lg mindre antal retter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this);\n  } // load all recipes from the data file and store them in an array\n\n\n  const allRecipes = recipes.map(recipe => {\n    return recipe;\n  }); // based on the number of dishes, pick random recipes from the array\n  // no duplicates\n\n  const randomRecipes = [];\n\n  for (let i = 0; i < numDishes; i++) {\n    let randomRecipe = allRecipes[Math.floor(Math.random() * allRecipes.length)];\n\n    if (!randomRecipes.includes(randomRecipe)) {\n      randomRecipes.push(randomRecipe);\n    }\n  } // display the week number\n\n\n  let currentDate = new Date();\n  let startDate = new Date(currentDate.getFullYear(), 0, 1);\n  var days = Math.floor((currentDate - startDate) / (24 * 60 * 60 * 1000));\n  var weekNumber = Math.ceil(days / 7); // export the random recipes as a text file\n\n  const downloadRecipes = () => {\n    const text = randomRecipes.map(recipe => {\n      // if there's no link, map only the name of the recipe\n      if (!recipe.link) {\n        return `${recipe.name}`;\n      } // if there's a link, map the name and the link separeted by a dash\n\n\n      return `${recipe.name} - ${recipe.link}`;\n    }).join(\"\\n\");\n    const blob = new Blob([text], {\n      type: \"text/plain\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"madplan.txt\";\n    link.click();\n  }; // make a comma separated list of the ingredients in the random recipes\n\n\n  const ingredients = randomRecipes.map(recipe => {\n    return recipe.ingredients;\n  } // join the ingredients into one string\n  ).join(\", \"); // button that maps numDishes new random recipes when clicked\n\n  const mapRecipes = () => {\n    setNumDishes(numDishes);\n  }; // sort the ingredients alphabetically\n\n\n  const sortedIngredients = ingredients.split(\", \").sort().join(\", \"); // return the array of random recipes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Filter, {\n      onChangeNumDishes: numDishes => setNumDishes(numDishes)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dishList\",\n      children: randomRecipes.map(recipe => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dish\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: recipe.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Ingredienser: \", recipe.ingredients]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            href: recipe.link,\n            target: \"_blank\",\n            children: recipe.link\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this)]\n        }, recipe.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centeredContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: downloadRecipes,\n        children: \"Download madplan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: mapRecipes,\n        children: \"Nyt madplan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Dishes, \"eKV8A5pVfNCnR4HkLUkZKalepEk=\");\n\n_c = Dishes;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dishes\");","map":{"version":3,"names":["recipes","Filter","React","useState","Dishes","numDishes","setNumDishes","showIngredients","setShowIngredients","length","allRecipes","map","recipe","randomRecipes","i","randomRecipe","Math","floor","random","includes","push","currentDate","Date","startDate","getFullYear","days","weekNumber","ceil","downloadRecipes","text","link","name","join","blob","Blob","type","url","URL","createObjectURL","document","createElement","href","download","click","ingredients","mapRecipes","sortedIngredients","split","sort","id"],"sources":["/Users/mathilde.gehring/Documents/GitHub/madplan/src/components/dishes.js"],"sourcesContent":["import recipes from \"../data/recipes.json\";\nimport { Filter } from \"./filter\";\nimport React, { useState } from \"react\";\n\nexport function Dishes() {\n  const [numDishes, setNumDishes] = useState();\n  const [showIngredients, setShowIngredients] = useState(false);\n\n  // if numDishes is not set or equal to 0, ask to set number of dishes\n  if (!numDishes || numDishes === 0) {\n    return (\n      <div className=\"dishContainer\">\n        <Filter onChangeNumDishes={setNumDishes} />\n      </div>\n    );\n  }\n\n  // if numDishes is larger than the number of recipes, show error message and provide a return button\n  if (numDishes > recipes.length) {\n    return (\n      <div className=\"dishContainer\">\n        <p>Du har valgt for mange retter.</p>\n        <button onClick={() => setNumDishes(0)}>\n          VÃ¦lg mindre antal retter\n        </button>\n      </div>\n    );\n  }\n\n  // load all recipes from the data file and store them in an array\n  const allRecipes = recipes.map((recipe) => {\n    return recipe;\n  });\n\n  // based on the number of dishes, pick random recipes from the array\n  // no duplicates\n  const randomRecipes = [];\n  for (let i = 0; i < numDishes; i++) {\n    let randomRecipe =\n      allRecipes[Math.floor(Math.random() * allRecipes.length)];\n    if (!randomRecipes.includes(randomRecipe)) {\n      randomRecipes.push(randomRecipe);\n    }\n  }\n\n  // display the week number\n  let currentDate = new Date();\n  let startDate = new Date(currentDate.getFullYear(), 0, 1);\n  var days = Math.floor((currentDate - startDate) / (24 * 60 * 60 * 1000));\n  var weekNumber = Math.ceil(days / 7);\n\n  // export the random recipes as a text file\n  const downloadRecipes = () => {\n    const text = randomRecipes\n      .map((recipe) => {\n        // if there's no link, map only the name of the recipe\n        if (!recipe.link) {\n          return `${recipe.name}`;\n        }\n        // if there's a link, map the name and the link separeted by a dash\n        return `${recipe.name} - ${recipe.link}`;\n      })\n      .join(\"\\n\");\n\n    const blob = new Blob([text], {\n      type: \"text/plain\",\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"madplan.txt\";\n    link.click();\n  };\n\n  // make a comma separated list of the ingredients in the random recipes\n  const ingredients = randomRecipes\n    .map(\n      (recipe) => {\n        return recipe.ingredients;\n      }\n      // join the ingredients into one string\n    )\n    .join(\", \");\n\n  // button that maps numDishes new random recipes when clicked\n  const mapRecipes = () => {\n    setNumDishes(numDishes);\n  };\n\n  // sort the ingredients alphabetically\n  const sortedIngredients = ingredients.split(\", \").sort().join(\", \");\n\n  // return the array of random recipes\n  return (\n    <div>\n      <Filter onChangeNumDishes={(numDishes) => setNumDishes(numDishes)} />\n      <div className=\"dishList\">\n        {randomRecipes.map((recipe) => {\n          return (\n            <div className=\"dish\" key={recipe.id}>\n              <h3>{recipe.name}</h3>\n              <p>Ingredienser: {recipe.ingredients}</p>\n              <a href={recipe.link} target=\"_blank\">\n                {recipe.link}\n              </a>\n            </div>\n          );\n        })}\n      </div>\n      <div className=\"centeredContainer\">\n        <button onClick={downloadRecipes}>Download madplan</button>\n        <button onClick={mapRecipes}>Nyt madplan</button>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}