{"ast":null,"code":"var _jsxFileName = \"/Users/mathilde/Desktop/madplan/src/components/makeMealplan.js\",\n    _s = $RefreshSig$();\n\nimport recipes from \"../data/recipes.json\";\nimport { Filter } from \"./filter\";\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Mealplan() {\n  _s();\n\n  const [showIngredients, setShowIngredients] = useState(false); // display the week number\n\n  let currentDate = new Date();\n  let startDate = new Date(currentDate.getFullYear(), 0, 1);\n  var days = Math.floor((currentDate - startDate) / (24 * 60 * 60 * 1000));\n  var weekNumber = Math.ceil(days / 7); // export the random recipes as a text file\n\n  const downloadRecipes = () => {\n    const text = randomRecipes.map(recipe => {\n      // if there's no link, map only the name of the recipe\n      if (!recipe.link) {\n        return `${recipe.name}`;\n      } // if there's a link, map the name and the link separeted by a dash\n\n\n      return `${recipe.name} - ${recipe.link}`;\n    }).join(\"\\n\");\n    const blob = new Blob([text], {\n      type: \"text/plain\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"madplan.txt\";\n    link.click();\n  }; // make a comma separated list of the ingredients in the random recipes\n\n\n  const ingredients = randomRecipes.map(recipe => {\n    return recipe.ingredients;\n  } // join the ingredients into one string\n  ).join(\", \"); // sort the ingredients alphabetically\n\n  const sortedIngredients = ingredients.split(\", \").sort().join(\", \"); // make a list of the sorted ingredients and count how many times each ingredient is used\n\n  const ingredientList = sortedIngredients.split(\", \");\n  const ingredientCount = {};\n  ingredientList.forEach(ingredient => {\n    ingredientCount[ingredient] = (ingredientCount[ingredient] || 0) + 1;\n  }); // sort ingredient count by alphabetical order\n\n  const sortedIngredientCount = Object.entries(ingredientCount);\n  sortedIngredientCount.sort((a, b) => {\n    if (a[0] < b[0]) {\n      return -1;\n    }\n\n    if (a[0] > b[0]) {\n      return 1;\n    }\n\n    return 0;\n  }); // button that returns the ingredients as a text file\n\n  const downloadIngredients = () => {\n    const text = sortedIngredientCount.map(ingredient => {\n      if (ingredient[1] > 1) {\n        return `${ingredient[1]}x ${ingredient[0]}`;\n      } else {\n        return `${ingredient[0]}`;\n      }\n    }) // join the ingredients into one string\n    .join(\"\\n\");\n    const blob = new Blob([text], {\n      type: \"text/plain\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"ingredienser.txt\";\n    link.click();\n  }; // return the array of random recipes\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Filter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centeredContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: downloadIngredients,\n          children: \"Hent ingrediensliste\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: downloadRecipes,\n          children: \"Hent madplan\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Mealplan, \"KQTOIUa8tQrHY+yVspHpXsCHp+I=\");\n\n_c = Mealplan;\n\nvar _c;\n\n$RefreshReg$(_c, \"Mealplan\");","map":{"version":3,"names":["recipes","Filter","React","useState","Mealplan","showIngredients","setShowIngredients","currentDate","Date","startDate","getFullYear","days","Math","floor","weekNumber","ceil","downloadRecipes","text","randomRecipes","map","recipe","link","name","join","blob","Blob","type","url","URL","createObjectURL","document","createElement","href","download","click","ingredients","sortedIngredients","split","sort","ingredientList","ingredientCount","forEach","ingredient","sortedIngredientCount","Object","entries","a","b","downloadIngredients"],"sources":["/Users/mathilde/Desktop/madplan/src/components/makeMealplan.js"],"sourcesContent":["import recipes from \"../data/recipes.json\";\nimport { Filter } from \"./filter\";\nimport React, { useState } from \"react\";\n\nexport function Mealplan() {\n  const [showIngredients, setShowIngredients] = useState(false);\n\n  // display the week number\n  let currentDate = new Date();\n  let startDate = new Date(currentDate.getFullYear(), 0, 1);\n  var days = Math.floor((currentDate - startDate) / (24 * 60 * 60 * 1000));\n  var weekNumber = Math.ceil(days / 7);\n\n  // export the random recipes as a text file\n  const downloadRecipes = () => {\n    const text = randomRecipes\n      .map((recipe) => {\n        // if there's no link, map only the name of the recipe\n        if (!recipe.link) {\n          return `${recipe.name}`;\n        }\n        // if there's a link, map the name and the link separeted by a dash\n        return `${recipe.name} - ${recipe.link}`;\n      })\n      .join(\"\\n\");\n\n    const blob = new Blob([text], {\n      type: \"text/plain\",\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"madplan.txt\";\n    link.click();\n  };\n\n  // make a comma separated list of the ingredients in the random recipes\n  const ingredients = randomRecipes\n    .map(\n      (recipe) => {\n        return recipe.ingredients;\n      }\n      // join the ingredients into one string\n    )\n    .join(\", \");\n\n  // sort the ingredients alphabetically\n  const sortedIngredients = ingredients.split(\", \").sort().join(\", \");\n\n  // make a list of the sorted ingredients and count how many times each ingredient is used\n  const ingredientList = sortedIngredients.split(\", \");\n  const ingredientCount = {};\n  ingredientList.forEach((ingredient) => {\n    ingredientCount[ingredient] = (ingredientCount[ingredient] || 0) + 1;\n  });\n\n  // sort ingredient count by alphabetical order\n  const sortedIngredientCount = Object.entries(ingredientCount);\n  sortedIngredientCount.sort((a, b) => {\n    if (a[0] < b[0]) {\n      return -1;\n    }\n    if (a[0] > b[0]) {\n      return 1;\n    }\n    return 0;\n  });\n\n  // button that returns the ingredients as a text file\n  const downloadIngredients = () => {\n    const text = sortedIngredientCount\n      .map((ingredient) => {\n        if (ingredient[1] > 1) {\n          return `${ingredient[1]}x ${ingredient[0]}`;\n        } else {\n          return `${ingredient[0]}`;\n        }\n      })\n\n      // join the ingredients into one string\n      .join(\"\\n\");\n\n    const blob = new Blob([text], {\n      type: \"text/plain\",\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"ingredienser.txt\";\n    link.click();\n  };\n\n  // return the array of random recipes\n  return (\n    <div>\n      <Filter />\n\n      <div className=\"centeredContainer\">\n        <div>\n          <button onClick={downloadIngredients}>Hent ingrediensliste</button>\n          <button onClick={downloadRecipes}>Hent madplan</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}